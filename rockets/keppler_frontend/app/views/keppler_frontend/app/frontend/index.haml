!!!
%html
  %header
    = render 'app/layouts/head'
  %body
    .container-custom
      = sidebar

      .workspace
        .d-flex
          .workspace-left
            = top_bar('Mesas')

            .workspace_center
              .workspace_title.d-lg-none.d-sm-none.d-xs-block.mb-4
                %h1 Mesas
              .container-fluid.p-0
                #tab-1.tab-content.current
                  %ul.sub-tabs#sub-tabs
                    - @sections.each_with_index do |section, index|
                      %li.tab-link{ 'data-tab': "sub-tab-#{index}", class: ('current' if index.zero?) }= section.name.capitalize

                  - @sections.each_with_index do |section, index|
                    .tab-content-sub{ id: "sub-tab-#{index}", class: ('current' if index.zero?) }
                      .d-flex
                        .grid-wrapper
                          - section.tables.each_with_index do |table, index|
                            = table(index)

          .workspace-right.sidebar
            = all_orders
            = table_orders(@sections)

  -# -# ADD PRODUCT
  -# - products = [{name: 'Cerveza', price: '15',image:"/assets/app/beer.jpg"},{name: 'Cóctel', price:'9',image:"/assets/app/cocktail.jpg"},{name: 'Mojito', price:'9',image:"/assets/app/mojito.jpeg"}]
  -# - products.each_with_index do |product,x|
  -#   .modal.fade{ class: "add_product-#{x}", "aria-hidden" => "true", "aria-labelledby" => "exampleModalLabel", role: "dialog" }
  -#     .modal-dialog{role: "document"}
  -#       .modal-content.p-0
  -#         .modal-header.p-0.modal-header-details
  -#           .modal-image
  -#             %img{ src: "#{product[:image]}"}
  -#           .mask
  -#             .modal-product-title
  -#               %h4= product[:name]
  -#               %span $ #{product[:price]}
  -#           %button.close{"aria-label" => "Close", "data-dismiss" => "modal", type: "button"}
  -#             %i.icofont-close.icon_custom.icon--large
  -#         .modal-body
  -#           .d-flex
  -#             .product-detail
  -#               %p Lorem Ipsum es un texto de marcador de posición comúnmente utilizado en las industrias.
  -#             .product-description
  -#               .card-product-detail.modal-body-details
  -#                 .card-price
  -#                   -# %span $ #{product[:price]}
  -#                 .card-product-quantity
  -#                   %a.inc.qty-button +
  -#                   %input.input_custom.input_quantity.qty{:inputmode => "numeric", :max => "", :min => "0", :pattern => "[0-9]*", :size => "4", :step => "1", :title => "Qty", :type => "price", :value => "1"}/
  -#                   %a.dec.qty-button -
  -#           %form.mt-4
  -#             .form-group
  -#               %label.label_custom{for:""} Observaciones
  -#               %textarea.form-control.textarea_custom{ 'data-role'=> "tags-input" }
  -#             .float-right.mt-2
  -#               %button.btn.btn_custom.btn--medium.btn--filled
  -#                 Agregar

:javascript
  $('.js-btn-order').click(function(){
    $('.order-wrapper').removeClass('current')
  })

  $('.btn-sidebar').click(function(){
    $('.sidebar').toggleClass('active-sidebar');
  })

  $('.menu-toggle').click(function(){
    $('aside').toggleClass('active-menu');
  })
  $('.close-order').click(function(){
     $('.sidebar').removeClass('active-sidebar');
  })

  $('.dropdown-toggle').dropdown()
  $('.modal').on('shown.bs.modal', function () {
    $('body').addClass('overflow')
    $('.close').click(function(){
      $('body').removeClass('overflow')
      $('.modal').removeClass('in')
    })
  });
  (function ($) {
    'use strict';

    $.fn.tagsInput = function (options) {
      const settings = $.extend({
        tagClass: 'badge badge-primary',
        tagsContainerClass: 'form-control',
        highlightColor: '#ffc107'
      }, options);

      const ATTR_RENDERED = 'data-rendered';
      const ATTR_DISABLED = 'disabled';
      const TRUE = 'true';
      const helpers = new Helpers();
      const tagRemoveIconTemplate = '<i class="tag-remove">&#10006;</i>';
      const tagTemplate = function(isDisabled) {
        return helpers.fillIn('<div class="tag {tagClass}"><span>{value}</span>{tagRemoveIcon}</div>', {
          'tagClass' : helpers.sanitizeText(settings.tagClass),
          'tagRemoveIcon' : isDisabled? '' : tagRemoveIconTemplate
        });
      }
      const tagsContainerTemplate = function(isDisabled) {
        return helpers.fillIn('<div class="tags-container {tagsContainerClass} {state}"><input type="text" size="1" {state}><div>', {
          'tagsContainerClass' : helpers.sanitizeText(settings.tagsContainerClass),
          'state' : isDisabled? 'disabled' : ''
        });
      }

      /** Render TagsInput elements */
      this.each(function () {
        if (this.hasAttribute(ATTR_RENDERED)) {
          return;
        }

        const isDisabled = this.hasAttribute(ATTR_DISABLED);
        const tTag = tagTemplate(isDisabled);
        const tTagsContainer = tagsContainerTemplate(isDisabled);

        const $that = $(this);
        const tagElems = [];
        const hiddenValue = $that.val();
        if (hiddenValue) {
          $.each(hiddenValue.split(';'), function (index, value) {
            const v = value.trim();
            if (v.length > 0) {
              tagElems.unshift(jQuery(tTag.replace('{value}', v)));
            }
          });
        }

        const tagsContainerElem = $(tTagsContainer);
        $.each(tagElems, function (index, value) {
          tagsContainerElem.prepend(value);
        });
        $that.after(tagsContainerElem);
        $that.attr('hidden', TRUE);
        $that.attr(ATTR_RENDERED, TRUE);


      });

      /** Register events */
      $('i.tag-remove').click(helpers.removeTag);

      $('.tags-container').not('disabled').click(function (e) {
        $(this).children('input').focus();
      });

      $('.tags-container').not('disabled').children('input').bind('input', function (e) {
        helpers.resetSize(this);
      });

      const activeTagTemplate = tagTemplate(false);
      $('.tags-container').not('disabled').children('input').keydown(function (e) {
        if (e.key === 'Enter' || e.key === ';') {
          e.preventDefault();
          const input = $(e.currentTarget);
          let value = input.val().trim();
          if (value) {
            value = helpers.sanitizeText(value);
            const existingSpan = input.siblings('div').filter(function () {
              return ($(this).find('span').text() === value);
            });
            if (existingSpan.length > 0) {
              if (!settings.hasOwnProperty('tagColor')) {
                settings.tagColor = existingSpan.css('background-color');
              }
              helpers.blink(existingSpan, settings.highlightColor, settings.tagColor);
            } else {
              const newTag = $(activeTagTemplate.replace('{value}', value));
              newTag.insertBefore(input);
              newTag.children('i').click(helpers.removeTag);

              const hiddenInput = $(this).parent().prev();
              let oValue = hiddenInput.val();
              if (oValue.length > 0 && oValue.charAt(oValue.length - 1) != ';') {
                oValue += ';';
              }
              input.val('');
              helpers.resetSize(input);
              hiddenInput.val(oValue.concat(value).concat(';'));
            }
          }
          return false;
        }
      });
    }

    /*** Helper functions declaration ***/
    function Helpers() {}

    Helpers.prototype.resetSize = function (target) {
      const $target = $(target);
      const len = $target.val().length;
      $target.attr('size', (len < 1) ? 1 : len);
    }

    Helpers.prototype.removeTag = function (e) {
      const $that = $(this);
      const parent = $that.parent();
      const hiddenInput = parent.parent().prev();
      const text = $that.siblings('span').text();
      const hValue = hiddenInput.val();
      const pattern =  `(^${text};)|(;${text};)`;
      const result = hValue.replace(new RegExp(pattern, 'u'), ';');
      hiddenInput.val(result);
      parent.remove();
    }

    Helpers.prototype.sanitizeText = function (raw) {
      return $('<div>').text(raw).html();
    }

    Helpers.prototype.blink = function (target, highlightColor, tagColor) {
      const $target = $(target);
      $target.stop().animate({
        backgroundColor: highlightColor
      }, 200).promise().done(function () {
        $target.animate({
          backgroundColor: tagColor
        }, 200);
      });
    }

    Helpers.prototype.fillIn = function(stringTemplate, variables) {
      return stringTemplate.replace(new RegExp("\{([^\{]+)\}", "g"), function(_unused, varName){
          return variables[varName] === undefined? '{'.concat(varName).concat('}') : variables[varName];
      });
  }

  })(jQuery)
  $('[data-role="tags-input"]').tagsInput();
