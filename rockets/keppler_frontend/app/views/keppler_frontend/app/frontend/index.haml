!!!
%html
  %header
    = render 'app/layouts/head'
  %body
    .container-custom
      %aside
        %ul.tabs
          %li
            = image_tag '/assets/app/z', class: 'isologo_white'
          %li.has-menu.tab-link.current{ 'data-tab' => 'tab-1' }
            .icons
              %i.icofont-dining-table
          %li.has-menu.tab-link{ 'data-tab' => 'tab-2' }
            .icons
              %i.icofont-restaurant
          %li.has-menu.tab-link{ 'data-tab' => 'tab-3' }
            .icons
              %i.icofont-restaurant
      .workspace
        .workspace_top
          .workspace_top-container
            .workspace_title
              %h1 Mesas
            .workspace_avatar
              .avatar-content.dropdown
                %a#out.dropdown-toggle.d-flex.align-items-center{ "aria-expanded" => "false", "aria-haspopup" => "true", "data-toggle" => "dropdown", :href => "#", :role => "button" }
                  .avatar
                    = image_tag '/assets/app/profile'
                  %strong=current_member.alias
                .dropdown-menu{"aria-labelledby" => "out"}
                  = link_to app_destroy_session_path, class: 'dropdown-item' do
                    Cerrar Sesion

        .workspace_center
          .container-fluid.p-0
            #tab-1.tab-content.current
              %ul.sub-tabs#sub-tabs
                - @sections.each_with_index do |section, index|
                  %li.tab-link{ 'data-tab': "sub-tab-#{index}", class: ('current' if index.zero?) }= section.name.capitalize

              - @sections.each_with_index do |section, index|
                .tab-content-sub{ id: "sub-tab-#{index}", class: ('current' if index.zero?) }
                  .d-flex
                    .grid-wrapper
                      - (10).times do |index|
                        .card-wrapper{ "data-tab" => "space_one-#{index}", class: ('disabled' if index.even?)  }
                          .card-content.card-table
                            %h2= index + 1
                            .card-icons
                              %i.icofont-dining-table

                    .grid-order
                      - (10).times do |index|
                        .order-wrapper.tab-content{ id: "space_one-#{index}"}
                          .order-header
                            %h4 Mesa número #{index+ 1}
                            %i.icofont-close.icon_custom.icon--medium.close-order
                          .order-content.order-content--fixed.d-flex
                            - counts =[{name: 'Gladibeth Franco',products: '3', count: '30'}, {name: 'Anaritza Lopez',products: '1',count: '10'}]
                            .order-counts
                              -counts.each_with_index do |count|
                                .card-content.card-counts
                                  .order-card-counts
                                    .description-user.d-flex.justify-content-between
                                      %h4= count[:name]
                                      %p 10 min
                                    .list
                                      %dl
                                        %dt Productos
                                        %dd #{count[:products]}
                                        %dt Cuenta total
                                        %dd $#{count[:count]}
                          .order-footer.sticky-footer
                            %button.btn.btn_custom.btn--medium.btn--filled{'data-target': "#create_counts", 'data-toggle': 'modal', 'data-backdrop': 'static', 'data-keyboard': false }
                              %i.icofont-plus
                              Agregar cuenta

            #tab-2.tab-content

              %ul.sub-tabs#categories
                %li.tab-link.current{ 'data-tab' => 'category-1' } Comida
              #category-1.category-content.current
                .d-flex.flex-wrap
                  - @categories.each_with_index do |category|
                    .card-category
                      %img{ src: category&.pictures&.first&.picture&.url }
                      .mask
                        .card-category-content
                          .category-title
                            %h4= category.name
                          .card-quantity
                            %span= category.dishes_count

            #tab-3.tab-content
              .back
                %i.icofont-arrow-left
                %span Volver
              .d-flex
                .grid-wrapper.d-flex.flex-wrap
                  - @dishes.each_with_index do |dish, index|
                    .card-wrapper
                      .card-content.card-product
                        .card-product-image
                          .product-image
                            %img{ src: "" }
                        .card-product-description.pl-4
                          .card-product-title
                            %h4.m-0= dish.name
                          .card-product-detail
                            .card-price
                              %span $ #{dish.precio1}
                            .card-product-quantity
                              %a.inc.qty-button +
                              %input.input_custom.input_quantity.qty{:inputmode => "numeric", :max => "", :min => "0", :pattern => "[0-9]*", :size => "4", :step => "1", :title => "Qty", :type => "price", :value => "1"}/
                              %a.dec.qty-button -
                        .card-product-btn
                          %a{ 'data-target': ".add_product-#{index}", 'data-toggle': 'modal', 'data-backdrop': 'static', 'data-keyboard': false } Agregar


                .grid-order
                  .order-wrapper
                    .order-header
                      %h4 Mis ordenes
                      %i.icofont-close.icon_custom.icon--medium.close-order
                    .order-content.order-content--fixed.d-flex.flex-wrap
                      - products = [{name: 'Cerveza', price: '15',image:"/assets/app/beer.jpg", quantity: '2'},{name: 'Cóctel', price:'9',image:"/assets/app/cocktail.jpg",quantity: '3'},{name: 'Mojito', price:'9',image:"/assets/app/mojito.jpeg", quantity: '3'}]
                      - products.each_with_index do |product|
                        .card-wrapper
                          .card-content.card-counts
                            .card-product-image
                              .product-image.product-image-order
                                %img{ src: "#{product[:image]}"}
                            .card-product-description.pl-4
                              .card-product-title
                                %h4.m-0= product[:name]
                              .card-product-detail.card-detail-order
                                .card-price
                                  %span $ #{product[:price]} X
                                  %span.box-quantity= product[:quantity]
                                .card-product-delete
                                  %i.icofont-ui-delete
                    .order-footer.order-footer-product
                      %span Total:
                      %span $ 60

  -# MODAL CREATE COUNT
  .modal.fade#create_counts{ "aria-hidden" => "true", "aria-labelledby" => "exampleModalLabel", role: "dialog" }
    .modal-dialog{role: "document"}
      .modal-content
        .modal-header
          %h2.m-0 Crear cuenta
          %button.close{"aria-label" => "Close", "data-dismiss" => "modal", type: "button"}
            %i.icofont-close.icon_custom.icon--large
        .modal-body
          %form
            .form-group
              %label.label_custom{for:""} Nombres y apellido
              %input.form-control.input_custom{ placeholder: ''}
            .form-group
              %label.label_custom{for:""} Cédula
              %input.form-control.input_custom{ placeholder: '',type:'number'}
            .form-group
              %label.label_custom{for:""} Dirección
              %input.form-control.input_custom{ placeholder: '',type:'number'}
            .float-right.mt-2
              %button.btn.btn_custom.btn--medium.btn--filled
                Guardar
            .float-right.mt-2.mr-2
              %button.btn.btn_custom.btn--medium.btn-default
                Guardar y crear


  -# ADD PRODUCT
  - products = [{name: 'Cerveza', price: '15',image:"/assets/app/beer.jpg"},{name: 'Cóctel', price:'9',image:"/assets/app/cocktail.jpg"},{name: 'Mojito', price:'9',image:"/assets/app/mojito.jpeg"}]
  - products.each_with_index do |product,x|
    .modal.fade{ class: "add_product-#{x}", "aria-hidden" => "true", "aria-labelledby" => "exampleModalLabel", role: "dialog" }
      .modal-dialog{role: "document"}
        .modal-content.p-0
          .modal-header.p-0.modal-header-details
            .modal-image
              %img{ src: "#{product[:image]}"}
            .mask
              .modal-product-title
                %h4= product[:name]
            %button.close{"aria-label" => "Close", "data-dismiss" => "modal", type: "button"}
              %i.icofont-close.icon_custom.icon--large
          .modal-body
            .d-flex
              .product-detail
                %p Lorem Ipsum es un texto de marcador de posición comúnmente utilizado en las industrias.
              .product-description
                .card-product-detail.modal-body-details
                  .card-price
                    %span $ #{product[:price]}
                  .card-product-quantity
                    %a.inc.qty-button +
                    %input.input_custom.input_quantity.qty{:inputmode => "numeric", :max => "", :min => "0", :pattern => "[0-9]*", :size => "4", :step => "1", :title => "Qty", :type => "price", :value => "1"}/
                    %a.dec.qty-button -
            %form.mt-4
              .form-group
                %label.label_custom{for:""} Observaciones
                %textarea.form-control.textarea_custom{ 'data-role'=> "tags-input" }
              .float-right.mt-2
                %button.btn.btn_custom.btn--medium.btn--filled
                  Agregar


:javascript
  $('.dropdown-toggle').dropdown()
  $('.modal').on('shown.bs.modal', function () {
    $('body').addClass('overflow')
    $('.close').click(function(){
      $('body').removeClass('overflow')
      $('.modal').removeClass('in')
    })
  });
  (function ($) {
    'use strict';

    $.fn.tagsInput = function (options) {
      const settings = $.extend({
        tagClass: 'badge badge-primary',
        tagsContainerClass: 'form-control',
        highlightColor: '#ffc107'
      }, options);

      const ATTR_RENDERED = 'data-rendered';
      const ATTR_DISABLED = 'disabled';
      const TRUE = 'true';
      const helpers = new Helpers();
      const tagRemoveIconTemplate = '<i class="tag-remove">&#10006;</i>';
      const tagTemplate = function(isDisabled) {
        return helpers.fillIn('<div class="tag {tagClass}"><span>{value}</span>{tagRemoveIcon}</div>', {
          'tagClass' : helpers.sanitizeText(settings.tagClass),
          'tagRemoveIcon' : isDisabled? '' : tagRemoveIconTemplate
        });
      }
      const tagsContainerTemplate = function(isDisabled) {
        return helpers.fillIn('<div class="tags-container {tagsContainerClass} {state}"><input type="text" size="1" {state}><div>', {
          'tagsContainerClass' : helpers.sanitizeText(settings.tagsContainerClass),
          'state' : isDisabled? 'disabled' : ''
        });
      }

      /** Render TagsInput elements */
      this.each(function () {
        if (this.hasAttribute(ATTR_RENDERED)) {
          return;
        }

        const isDisabled = this.hasAttribute(ATTR_DISABLED);
        const tTag = tagTemplate(isDisabled);
        const tTagsContainer = tagsContainerTemplate(isDisabled);

        const $that = $(this);
        const tagElems = [];
        const hiddenValue = $that.val();
        if (hiddenValue) {
          $.each(hiddenValue.split(';'), function (index, value) {
            const v = value.trim();
            if (v.length > 0) {
              tagElems.unshift(jQuery(tTag.replace('{value}', v)));
            }
          });
        }

        const tagsContainerElem = $(tTagsContainer);
        $.each(tagElems, function (index, value) {
          tagsContainerElem.prepend(value);
        });
        $that.after(tagsContainerElem);
        $that.attr('hidden', TRUE);
        $that.attr(ATTR_RENDERED, TRUE);


      });

      /** Register events */
      $('i.tag-remove').click(helpers.removeTag);

      $('.tags-container').not('disabled').click(function (e) {
        $(this).children('input').focus();
      });

      $('.tags-container').not('disabled').children('input').bind('input', function (e) {
        helpers.resetSize(this);
      });

      const activeTagTemplate = tagTemplate(false);
      $('.tags-container').not('disabled').children('input').keydown(function (e) {
        if (e.key === 'Enter' || e.key === ';') {
          e.preventDefault();
          const input = $(e.currentTarget);
          let value = input.val().trim();
          if (value) {
            value = helpers.sanitizeText(value);
            const existingSpan = input.siblings('div').filter(function () {
              return ($(this).find('span').text() === value);
            });
            if (existingSpan.length > 0) {
              if (!settings.hasOwnProperty('tagColor')) {
                settings.tagColor = existingSpan.css('background-color');
              }
              helpers.blink(existingSpan, settings.highlightColor, settings.tagColor);
            } else {
              const newTag = $(activeTagTemplate.replace('{value}', value));
              newTag.insertBefore(input);
              newTag.children('i').click(helpers.removeTag);

              const hiddenInput = $(this).parent().prev();
              let oValue = hiddenInput.val();
              if (oValue.length > 0 && oValue.charAt(oValue.length - 1) != ';') {
                oValue += ';';
              }
              input.val('');
              helpers.resetSize(input);
              hiddenInput.val(oValue.concat(value).concat(';'));
            }
          }
          return false;
        }
      });
    }

    /*** Helper functions declaration ***/
    function Helpers() {}

    Helpers.prototype.resetSize = function (target) {
      const $target = $(target);
      const len = $target.val().length;
      $target.attr('size', (len < 1) ? 1 : len);
    }

    Helpers.prototype.removeTag = function (e) {
      const $that = $(this);
      const parent = $that.parent();
      const hiddenInput = parent.parent().prev();
      const text = $that.siblings('span').text();
      const hValue = hiddenInput.val();
      const pattern =  `(^${text};)|(;${text};)`;
      const result = hValue.replace(new RegExp(pattern, 'u'), ';');
      hiddenInput.val(result);
      parent.remove();
    }

    Helpers.prototype.sanitizeText = function (raw) {
      return $('<div>').text(raw).html();
    }

    Helpers.prototype.blink = function (target, highlightColor, tagColor) {
      const $target = $(target);
      $target.stop().animate({
        backgroundColor: highlightColor
      }, 200).promise().done(function () {
        $target.animate({
          backgroundColor: tagColor
        }, 200);
      });
    }

    Helpers.prototype.fillIn = function(stringTemplate, variables) {
      return stringTemplate.replace(new RegExp("\{([^\{]+)\}", "g"), function(_unused, varName){
          return variables[varName] === undefined? '{'.concat(varName).concat('}') : variables[varName];
      });
  }

  })(jQuery)
  $('[data-role="tags-input"]').tagsInput();
